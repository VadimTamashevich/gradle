dependencies {
    implementation(project(":client"))
    implementation(project(":app"))
   // implementation('com.fasterxml.jackson.core:jackson-databind:default')
}

configurations.configureEach {

    /* при возникновении конфликта версий билд упадёт */
    // resolutionStrategy.failOnVersionConflict()

    /* при возникновении конфликта жёстко устанавливаем версию зависимости которая попадёт в classpath */
    // resolutionStrategy.force('com.googlecode.jsontoken:jsontoken:1.1')

    /* отключение транзитивных зависимостей, при наличии данной настройки будет подтягиваться только основной артефакт*/
    // resolutionStrategy { transitive = false}

    /* выключает возможность добавления динамических версий */
    // resolutionStrategy.failOnDynamicVersions()

    /* включает блокировку изменения версий в случае каких либо изменений бросит исключение */
    // resolutionStrategy.activateDependencyLocking()

    /* включает блокировку изменения версий в случае каких либо изменений бросит исключение */
    // resolutionStrategy.activateDependencyLocking()

//    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//
//        if (details.requested.version == "default") {
//            def name = details.requested.name.split("-")[0]
//            details.useVersion java.util.Optional.ofNullable(project.libs.versions.config.versions.get(name).version.requiredVersion)
//                    .orElseThrow(() -> new BuildCancelledException("version for $details.requested.name not found"))
//        }
//    }
}

